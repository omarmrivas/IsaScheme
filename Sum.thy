theory Sum
imports "IsaLibs/IsaLibs"
begin

section {* Summation *}

text {* This theory file shows how to find a function that adds the elements of a list of natural 
numbers in Isabelle/HOL. *}

subsection {* Destructor style functional scheme *}

text {* We first define the functional space of a destructor style functional scheme. *}

definition scheme_dest where
"scheme_dest N \<equiv> \<exists>(f::int list\<Rightarrow>int). \<forall>(xs::int list).
  f xs = N xs
           (\<lambda>x (y::int) z. if x then y else z)
           (op = :: int list\<Rightarrow>int list\<Rightarrow>bool)
           ([] :: int list)
           (op + :: int\<Rightarrow>int\<Rightarrow>int)
           (0 :: int)
           (\<lambda>xs. if xs = [] then (0::int) else hd xs)
           (tl :: int list\<Rightarrow>int list)
           f"

text {* Now we get the terminating closure of the destructor style functional scheme. *}

definition terminating_closure_scheme_dest where
"terminating_closure_scheme_dest N \<equiv> \<exists>f. \<forall>(xs::int list) (c\<^sub>f::nat) v\<^sub>f.
  ((f N 0 v\<^sub>f xs = v\<^sub>f) \<and>
   (f N (Suc c\<^sub>f) v\<^sub>f xs::int) = N xs
           (\<lambda>x (y::int) z. if x then y else z)
           (op = :: int list\<Rightarrow>int list\<Rightarrow>bool)
           ([] :: int list)
           (op + :: int\<Rightarrow>int\<Rightarrow>int)
           (0 :: int)
           (\<lambda>xs. if xs = [] then (0::int) else hd xs)
           (tl :: int list\<Rightarrow>int list)
           (f N c\<^sub>f v\<^sub>f))"

text {* All individuals generated by @{term "terminating_closure_scheme_dest"}
  are terminating, regardless the value of @{term "N"}. The proof will need 
  the witness @{term "f\<^sub>d"} which we define below. *}

fun f\<^sub>d where
"f\<^sub>d N (0::nat) v\<^sub>f (xs::int list) = (v\<^sub>f::int)" |
"f\<^sub>d N (Suc c\<^sub>f) v\<^sub>f xs = N xs
           (\<lambda>x (y::int) z. if x then y else z)
           (op = :: int list\<Rightarrow>int list\<Rightarrow>bool)
           ([] :: int list)
           (op + :: int\<Rightarrow>int\<Rightarrow>int)
           (0 :: int)
           (\<lambda>xs. if xs = [] then (0::int) else hd xs)
           (tl :: int list\<Rightarrow>int list)
           (f\<^sub>d N c\<^sub>f v\<^sub>f)"

text {* Proof. *}

theorem "terminating_closure_scheme_dest N"
apply (unfold terminating_closure_scheme_dest_def)
by (rule_tac x="f\<^sub>d" in exI, simp)

subsection {* Constructor style functional scheme *}

text {* Now we define the functional space of a constructor style functional scheme. *}

definition scheme_const where
"scheme_const N \<equiv> \<exists>(f::int list\<Rightarrow>int). \<forall>(xs::int list) (x::int).
  (f [] = (0::int)) \<and>
  (f (x#xs) = N x
                xs
                (op + :: int\<Rightarrow>int\<Rightarrow>int)
                f)"

text {* Now we get the terminating closure of the constructor style functional scheme. *}

definition terminating_closure_scheme_const where
"terminating_closure_scheme_const N \<equiv> \<exists>f. \<forall>(xs::int list) (x::int) c\<^sub>f v\<^sub>f.
  (f N 0 v\<^sub>f xs = v\<^sub>f) \<and>
  (f N (Suc c\<^sub>f) v\<^sub>f [] = (0::int)) \<and>
  (f N (Suc c\<^sub>f) v\<^sub>f (x#xs) = N x
                xs
                (op + :: int\<Rightarrow>int\<Rightarrow>int)
                (f N c\<^sub>f v\<^sub>f))"

text {* All individuals generated by @{term "terminating_closure_scheme_const"}
  are terminating, regardless the value of @{term "N"}. The proof will need 
  the witness @{term "f\<^sub>c"} which we define below. *}

fun f\<^sub>c where
"f\<^sub>c N 0 v\<^sub>f (xs::int list) = v\<^sub>f"|
"f\<^sub>c N (Suc c\<^sub>f) v\<^sub>f [] = (0::int)"|
"f\<^sub>c N (Suc c\<^sub>f) v\<^sub>f (x#xs) = N x
                xs
                (op + :: int\<Rightarrow>int\<Rightarrow>int)
                (f\<^sub>c N c\<^sub>f v\<^sub>f)"

text {* Proof. *}

theorem "terminating_closure_scheme_const N"
apply (unfold terminating_closure_scheme_const_def)
by (rule_tac x="f\<^sub>c" in exI, simp)

subsection {* Evaluation of the Evolve algorithm. *}

text {* We define the fitness function, the termination criterion,
  and other GP related parameters.
*}

ML {*
  fun fitness ctxt functions =
    let val in_out = [(@{term "[9,2] :: int list"},11),
                      (@{term "[1]:: int list"},1),
                      (@{term "[1,2]:: int list"},3),
                      (@{term "[1,2,3]:: int list"},6),
                      (@{term "[1,2,3,4]:: int list"},10),
                      (@{term "[1,2,3,4,5]:: int list"},15),
                      (@{term "[1,2,3,4,5,6]:: int list"},21),
                      (@{term "[1,2,3,4,5,6,7]:: int list"},28),
                      (@{term "[1,2,3,4,5,6,7,8]:: int list"},36),
                      (@{term "[1,2,3,4,5,6,7,8,9]:: int list"},45)]
        val rec_counter = @{term "10::nat"}
        val vf = @{term "0 :: int"}
        val f = hd functions
        val error = 
          in_out |> map (fn (xs,r) => (Value.value ctxt (f $ rec_counter $ vf $ xs), r))
                 |> map (fn (i, r) => let val err = Utils.int_of_numeral i - r
                                      in err * err end)
    in (0, error) |> Library.foldl (op +)
                  |> Rat.rat_of_int end
  fun finish ({fit, ...} : GP.individual) = case fit of
                                              SOME fit => Rat.eq (Rat.zero, fit)
                                            | NONE => false
  fun test ctxt consts =
      consts |> fitness ctxt
             |> pair Rat.zero
             |> Rat.eq
  val term_size = 25
  val max_term_size_dest = 30
  val max_term_size_const = 30
  val population_size = 500
  val generations = 500
  val bests = 10
  val mut_prob = 0.05
  val scheme_dest = @{thm "scheme_dest_def"}
  val scheme_const = @{thm "scheme_const_def"}
  val functions_dest = [@{term "f\<^sub>d"}]
  val functions_const = [@{term "f\<^sub>c"}]
  val experiments = 20
  val recursive_calls = 1
  val bad_fitness = Rat.rat_of_int 10
*}

text {* We finally call the Evolve algorithm. *}

local_setup {*
 fn lthy =>
    let val experiment = GP.evolve true false false "SumConsts.log" scheme_const functions_const recursive_calls bad_fitness lthy fitness finish
                                   term_size max_term_size_const population_size generations bests mut_prob
        val _ = MySQL.new_experiment "SumConsts" generations term_size population_size experiment
    in lthy end
*}

local_setup {*
 fn lthy =>
    let val experiment = GP.evolve true false false "SumDest.log" scheme_dest functions_dest recursive_calls bad_fitness lthy fitness finish
                                   term_size max_term_size_dest population_size generations bests mut_prob
        val _ = MySQL.new_experiment "SumDest" generations term_size population_size experiment
    in lthy end
*}

end